#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples.  The first comments out the
# "Conflicts:" part of a merge commit.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

# Succeed on all merge messages, as evidenced by MERGE_MSG existing
[ -f $GIT_DIR/MERGE_MSG ] && exit 0

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

COMMIT_MSG=`cat $COMMIT_MSG_FILE`

BRANCH_NAME=$(git branch | grep '*' | sed 's/* //')

# If BRANCH_NAME match Jira ticket format "ABC-123" and COMMIT_MSG do not start with BRANCH_NAME then insert BRANCH_NAME
# at the start of COMMIT_MSG
if [[ $BRANCH_NAME =~ ^[A-Z]+-[0-9]+$ ]] && [[ !($COMMIT_MSG == $BRANCH_NAME*) ]]
then
    echo "$BRANCH_NAME $COMMIT_MSG" > $COMMIT_MSG_FILE
fi

exit 0
